//https://practice.geeksforgeeks.org/problems/chocolate-distribution-problem3825/1/#
//too many errors look into it
class Solution
{
    public long findMinDiff (ArrayList<Integer> a, int n, int m)
    {
        sort(a,0,n-1);
        int temp=0;
        int min_sum=Integer.MIN_VALUE;
        for(int i=0;i<n-m+1;i++)
        {
            temp=a.get(m+i)-a.get(i);
        }
        
        return temp;
    }
    void merge(ArrayList<Integer> a,int left,int mid,int right)
    {
        int n1=mid-left+1;
        int n2=right-mid;
        
        int leftArray[]=new int[n1];
        int rightArray[]=new int[n2];
        
        for(int i=0;i<n1;i++)
        {
            leftArray[i]=a.get(i);
        }
        for(int j=0;j<n2;j++)
        {
            rightArray[j]=a.get(mid+j);
        }
        int i=0,j=0;
        int k=left;
        while(i<n1 && j<n2)
        {
            if(leftArray[i]<=rightArray[j])
            {
                a.set(k,leftArray[i]);
                i++;
            }
            else
            {
                a.set(k,rightArray[j]);
                j++;
            }
            k++;
        }
        while(i<n1)
        {
            a.set(k,rightArray[i]);
            i++;
            k++;
        }
        while(j<n2)
        {
            a.set(k,leftArray[j]);
            j++;
            k++;
        }
    }
    void sort(ArrayList<Integer> a,int left,int right)
    {
        if(left<right)
        {
            int mid=left+(right-left)/2;
            sort(a,left,mid);
            sort(a,mid+1,right);
            merge(a,left,mid,right);
        }
    }
}
